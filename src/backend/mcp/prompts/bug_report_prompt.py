"""
Bug Report Prompt - Professional Bug Report Generation

This prompt template generates comprehensive bug reports from error information,
test steps, and context. It provides a structured format for documenting issues
found during test execution.
"""

import sys
from pathlib import Path
from typing import Optional, Dict, Any
from pydantic import BaseModel, Field

# Add the MCP server root to Python path
sys.path.append(str(Path(__file__).parent.parent))

from main import mcp_server
import structlog

logger = structlog.get_logger("intellibrowse.mcp.prompts.bug_report")


class BugReportRequest(BaseModel):
    """Request schema for bug report generation."""
    
    error_message: str = Field(
        description="The error message or failure description",
        example="Element not found: Unable to locate element with selector '#submit-button'"
    )
    
    test_steps: str = Field(
        description="The test steps that led to the error",
        example="1. Navigate to login page\n2. Enter username\n3. Enter password\n4. Click submit button"
    )
    
    expected_behavior: str = Field(
        description="What should have happened",
        example="User should be redirected to dashboard after successful login"
    )
    
    actual_behavior: str = Field(
        description="What actually happened",
        example="Submit button was not found, test failed with element not found error"
    )
    
    environment: Optional[str] = Field(
        default=None,
        description="Test environment information",
        example="Chrome 120.0, Windows 11, Test Environment"
    )
    
    severity: Optional[str] = Field(
        default="Medium",
        description="Bug severity level",
        example="High"
    )
    
    additional_context: Optional[str] = Field(
        default=None,
        description="Additional context or observations",
        example="This error occurs consistently across multiple test runs"
    )


class BugReportPrompt:
    """User-controlled prompt for generating professional bug reports."""
    
    @staticmethod
    def generate_template(request: BugReportRequest) -> str:
        """
        Generate a professional bug report template.
        
        Args:
            request: Bug report request with error and context information
            
        Returns:
            Formatted bug report template
        """
        logger.info("Generating bug report template", 
                   error_message=request.error_message[:100])
        
        # Environment section
        env_section = ""
        if request.environment:
            env_section = f"""
**Environment:**
{request.environment}
"""
        
        # Additional context section
        context_section = ""
        if request.additional_context:
            context_section = f"""
**Additional Context:**
{request.additional_context}
"""
        
        # Generate comprehensive bug report
        bug_report = f"""# Bug Report

## Summary
**Error:** {request.error_message}
**Severity:** {request.severity}

## Description
**Expected Behavior:**
{request.expected_behavior}

**Actual Behavior:**
{request.actual_behavior}

## Steps to Reproduce
{request.test_steps}
{env_section}{context_section}
## Investigation Notes
- [ ] Verify element selectors are correct
- [ ] Check for DOM changes or dynamic content
- [ ] Validate test environment setup
- [ ] Review recent application changes
- [ ] Test on different browsers/environments

## Potential Root Causes
- Element selector may have changed
- Dynamic content loading timing issues
- Browser compatibility issues
- Test environment configuration problems
- Application deployment issues

## Recommended Actions
1. **Immediate:** Update element selectors if DOM structure changed
2. **Short-term:** Add explicit waits for dynamic content
3. **Long-term:** Implement more robust element identification strategies

## Attachments
- Screenshots (if available)
- Browser console logs
- Network request logs
- Test execution logs

---
*Generated by IntelliBrowse MCP Server - Bug Report Prompt*
*Timestamp: {logger.info('Bug report generated successfully')}*"""

        return bug_report


@mcp_server.prompt()
def bug_report_prompt(
    error_message: str,
    test_steps: str,
    expected_behavior: str,
    actual_behavior: str,
    environment: Optional[str] = None,
    severity: Optional[str] = "Medium",
    additional_context: Optional[str] = None
) -> str:
    """
    MCP Prompt: Generate professional bug report from error information.
    
    This prompt creates a comprehensive bug report including error details,
    reproduction steps, and recommended investigation actions.
    
    Args:
        error_message: The error message or failure description
        test_steps: Test steps that led to the error
        expected_behavior: What should have happened
        actual_behavior: What actually happened
        environment: Test environment information (optional)
        severity: Bug severity level (optional, default: Medium)
        additional_context: Additional context or observations (optional)
        
    Returns:
        Formatted bug report template
    """
    logger.info("Bug report prompt invoked", 
               error_message=error_message[:50])
    
    try:
        # Create request object with validation
        request = BugReportRequest(
            error_message=error_message,
            test_steps=test_steps,
            expected_behavior=expected_behavior,
            actual_behavior=actual_behavior,
            environment=environment,
            severity=severity,
            additional_context=additional_context
        )
        
        # Generate bug report template
        bug_report = BugReportPrompt.generate_template(request)
        
        logger.info("Bug report prompt completed successfully")
        return bug_report
        
    except Exception as e:
        logger.error("Error generating bug report prompt", error=str(e))
        return f"Error generating bug report: {str(e)}"


# Alias for backward compatibility with test expectations
def generate_bug_report_prompt(error_message: str, context: str, severity: str = "Medium") -> str:
    """Generate bug report prompt (simplified interface for testing)."""
    return bug_report_prompt(
        error_message=error_message,
        test_steps=context,
        expected_behavior="Expected behavior not specified",
        actual_behavior=error_message,
        severity=severity
    ) 